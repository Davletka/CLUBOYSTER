@using CLUBOYSTER.Data;

@inject UserService userService;

@inject NavigationManager navMan

<div class="row" style="justify-content:center; height:auto; width:100%">
    <button type="button" class="btn btn-outline-light fw-bold" style="width:35%" @onclick="Add" data-mdb-ripple-color="light">
        Добавить поставщика
    </button>
</div>


<label></label>

@if (message != null)
{
    <blockquote style="color:white; text-align:center;  top:100px; line-height: 4; font-size:30px" class="fw-bold">
        <strong>@message</strong>
    </blockquote>
}

<h2 class="fw-bold text-white">Таблица поставщиков</h2>
<div style="height:auto; width:95%; align-content:center">
    <table class="table table-dark fw-bold border-2">
        <thead class="thead-dark">
            <tr>
                <th scope="col">Фамилия</th>
                <th scope="col">Имя</th>
                <th scope="col">Отчество</th>
                <th scope="col">Номер телефона</th>
                <th scope="col">Договор</th>
                <th scope="col">Закупиться</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in providers)
            {
                <tr>
                    <td>@item.SecondName</td>
                    <td>@item.FirstName</td>
                    <td>@item.Surname</td>
                    <td>@item.Phone</td>
                    <td><input type="checkbox" style="width:20px; height:20px" @bind="item.Document" disabled="disabled"/></td>
                    <td>
                        @if (item.Document.Value)
                        {
                            <button type="button" class="btn btn-outline-light fw-bold" data-mdb-ripple-color="light" @onclick="Buy">
                                Купить
                            </button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    [Parameter]

    public List<Providers>? providers { get; set; }

    Transactions transactions;

    private string? message;

    private User? user;

    Random rnd = new Random();

    private List<User>? users;

    User? owner;

    private void Add()
    {
        navMan.NavigateTo("/providers");
    }

    protected override async Task OnInitializedAsync()
    {
        owner = MongoDb.FindOwner();
        users = MongoDb.FindUsers().Where(x => x.GetType().Name == "Employee").ToList();
        user = userService.Get();
    }

    private void Buy()
    {
        transactions = new Transactions()
            {
                Type = "Расход",
                Time = DateTime.Now,
                User = user,
                Sum = rnd.Next(15000, 100000),
            };

        owner = new Owner()
            {
                FirstName = owner.FirstName,
                SecondName = owner.SecondName,
                Surname = owner.Surname,
                Phone = owner.Phone,
                Email = owner.Email,
                Login = owner.Login,
                Password = owner.Password,
                TotalEarning = (owner as Owner).TotalEarning - transactions.Sum.Value,
                AverageMonth = (owner as Owner).AverageMonth - transactions.Sum.Value,
                TotalCustomers = (owner as Owner).TotalCustomers,
            };
        MongoDb.ReplaceOwner(owner);
        message = "Покупка завершена";
        MongoDb.AddTransaction(transactions);
    }
}
