@page "/registration"
@using CLUBOYSTER.Data
@inject NavigationManager navigationManager;

<PageTitle>Registration Form</PageTitle>

<EditForm Model="userModel" style="height:auto; border-radius: 10px;">
    <DataAnnotationsValidator/>

    <h3 class="h3 fw-bold" style="line-height:1.4; margin-bottom:1.8rem">Регистрация</h3>
    <InputText id="name" type="text" placeholder="Логин" class="fw-bold" @bind-Value="userModel.Login"></InputText>
    <ValidationMessage For="() => userModel.Login"/>

    <InputText id="name" type="text" placeholder="Имя" class="fw-bold" @bind-Value="userModel.FirstName"></InputText>
    <ValidationMessage For="() => userModel.FirstName" />

    <InputText id="name" type="text" placeholder="Номер телефона" class="fw-bold" maxlength="11" @bind-Value="userModel.Phone"></InputText>
    <ValidationMessage For="() => userModel.Phone" />

    <InputText id="name" type="text" placeholder="Почта" class="fw-bold" @bind-Value="userModel.Email"></InputText>
    <ValidationMessage For="() => userModel.Email" />

    <InputText id="password" type="password" placeholder="Пароль" class="fw-bold" @bind-Value="userModel.Password"></InputText>
    <ValidationMessage For="() => userModel.Password" />

    <InputText id="password" type="password" placeholder="Подтверждение пароля" class="fw-bold"  @bind-Value="ConfirmPassword_"></InputText>
    <ValidationMessage For="() => userModel.Password" />

    <button type="button" style="height:35; border-radius: 20px;" class="fw-bold" @onclick="Registration">Зарегистрироваться</button>
    <label></label>

    @if (check == true)
    {
        <div style="text-align:center">
            <strong class="text-center bg-danger fw-bold">@exeption</strong>
        </div>
    }
    <label></label>
    <div style="text-align:center">
        <p class="mb-0 text-white fw-bold">Есть аккаунт? <a href="" class="text-white-50 fw-bold"> Авторизация</a>
        </p>
    </div>

</EditForm>


@code {
    User userModel = new User();

    private string? ConfirmPassword_;

    private bool? check = false;
    private string? exeption;

    private User? owner;

    List<User>? users;

    protected override async Task OnInitializedAsync()
    {
        try
        {
                owner = MongoDb.FindOwner();
        }
        catch {}

    }
    private void Registration()
    {
        try
        {
            users = MongoDb.FindUsers();
        }
        catch {};

        if (userModel.Login != null && userModel.FirstName != null && userModel.Phone != null && userModel.Email != null && userModel.Password != null && ConfirmPassword_ != null)
        {
            if (userModel.Password == ConfirmPassword_)
            {
                foreach (var item in users)
                {
                    if (item.Login == userModel.Login)
                    {
                        check = true;
                        exeption = "Такой логин уже существует";
                        return;
                    }
                    else
                    {
                        if (item.Email == userModel.Email)
                        {
                            check = true;
                            exeption = "Такая почта уже существует";
                            return;
                        }
                        else
                        {
                            if (item.Phone == userModel.Phone)
                            {
                                check = true;
                                exeption = "Такой телефон уже существует";
                                return;
                            }
                        }
                    }
                }

                User newUser = new User()
                {
                    Login = userModel.Login,
                    FirstName = userModel.FirstName,
                    Phone = userModel.Phone,
                    Email = userModel.Email,
                    Password = userModel.Password
                };

                if(owner != null)
                {
                    owner = new Owner()
                    {
                        FirstName = owner.FirstName,
                        SecondName = owner.SecondName,
                        Surname = owner.Surname,
                        Phone = owner.Phone,
                        Email = owner.Email,
                        Login = owner.Login,
                        Password = owner.Password,
                        TotalCustomers = 1 + (owner as Owner).TotalCustomers,
                        TotalEarning = (owner as Owner).TotalEarning,
                        AverageMonth = (owner as Owner).AverageMonth,
                    };
                MongoDb.ReplaceOwner(owner);
                }

                MongoDb.AddDb(newUser);
                navigationManager.NavigateTo("");
            }
            else
            {
                check = true;
                exeption = "Пароли не совпадают";
            }
        }
        else
        {
            check = true;
            exeption = "Заполните поля";
        }
    }
}
